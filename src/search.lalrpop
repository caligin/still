// use ast::{Expr, Opcode};

grammar;

pub Search = {
    (<SearchTerm>)+ ("|" Transform)* ("|" Sort)?
}

SearchTerm = {
    "*", // let's say that you have to have a searchexpr but it can be "any"
    <Bare>,
    <Quoted>,
    <FieldName>,
    "!" <Bare>,
    "!" <Quoted>,
    "!" <FieldName>,
}

Bare = {
    BARE,
};

Quoted = {
    r##""[^"]+""##, // FIXME: this is not really a quoted expr!
}

Regex = {
    Quoted, // FIXME: cheating temprarily, would like to have / / rather than " " ... but does it matter really?
}

Transform: Vec<&'input str> = {
    r"where" <a:FieldName> <b:FilterOp> <c:Quoted> => vec![a], // FIXME cheating hard on types
    r"parse" <a:FieldName> r"with" <b:Regex> r"as" (<FieldName>)+ => vec![a],
    r"count by" <a:FieldName> (r"," <FieldName>)+ => vec![a],
}

Sort = {
    r"sort by" (<FieldName>) (r"," <FieldName>)+, // TODO: asc/desc
}

FilterOp = {
    r"=",
    r"!=",
    r"match",
}

FieldName = {
    FIELD_NAME,
}


match {
    r"where", // TODO: AAAAAAAAAWWWW I NEED ALL THE BAREWORD TOKENS IN HERE NOWWWWW /cry
    r"!=", // hm or maybe doesn't work?
} else {
    r#"[[:alpha:]_]+(\.[[:alpha:]_]+)*"# => FIELD_NAME,
} else {
    r#"[[:alpha:]\.-_]+"# => BARE,
    _
}