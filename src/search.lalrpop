use crate::ast::{Search, SearchTerm, Transform, Aggregation, Sort, Comparison};

grammar;

pub Search: Box<Search<'input>> = {
    <search_terms:(SearchTerm)+> <transforms:(Transform)*> <sort:(Sort)?> => Box::new((search_terms, transforms, sort))
}

SearchTerm: SearchTerm<'input> = {
    "*" => SearchTerm::Any(), // let's say that you have to have a searchexpr but it can be "any"
    <SearchTermValue> => SearchTerm::Include(<>),
    "!" <SearchTermValue> => SearchTerm::Exclude(<>),
}

SearchTermValue = {
    <Unquoted>,
    <Quoted>,
}

Unquoted = {
    r#"[[:alpha:][0-9]_\-\.]+"#,
};

Quoted: &'input str = {
    r#""[^"]*""# => &<>[1..<>.len() - 1],
    r#"'[^']*'"# => &<>[1..<>.len() - 1],
}

Transform: Transform<'input> = {
    "|" "where" <field:Unquoted> <comparison:FilterOp> <value:Quoted> => Transform::Filter{field, comparison, value},
    "|" "parse" <field:Unquoted> "with" <parser:Quoted> "as" <bindings:FieldList>  => Transform::Parse{field, parser, bindings},
    "|" "count by" <fields:FieldList> => Transform::Aggregate(Aggregation::Count(fields)),
}

FieldList: Vec<&'input str> = {
    <fields:(<Unquoted> r",")*> <trailing:Unquoted?> => match trailing {
        None => fields,
        Some(trailing) => {
            let mut fields = fields;
            fields.push(trailing);
            fields
        }
    }
}

Sort: Sort<'input> = {
    "|" "sort by" <FieldList> => Sort::Desc(<>), // TODO: asc/desc
}

FilterOp: Comparison = {
    "=" => Comparison::Eq,
    "!=" => Comparison::Ne,
    "match" => Comparison::Match,
}